"""
This class produces plots for qualitative evaluation of a GAN model.

The plots include:
- t-SNE
- PCA
- Autocorrelation
- Moving Average
- Histograms

Typical usage example:
```python
>>> from src.models.baseline import SimpleGAN
>>> from src.utils.data import CarbonDataset
>>> model = SimpleGAN(metadata_dim=8, window_size=24, cpt_path="path/to/checkpoint.pt")
>>> dataset = CarbonDataset("CISO", "hydro", mode="test")
>>> qual = QualEvaluation(model, dataset, 1000)
>>> qual.plot_histograms()
```
"""

import matplotlib.pyplot as plt


class QualEvaluation:
    """
    Stores methods for qualitative evaluation of a GAN model.

    Attributes:
        model: The gan model to be evaluated
        dataset: The dataset to be used for evaluation
        n_samples: The number of samples to generate from the model for comparison
        gen_meta: The metadata generated by the model
        gen_seq: The sequential data generated by the model
        real_meta: The metadata from the dataset
        real_seq: The sequential data from the dataset
    
    Methods:
        plot_tsne: TBD
        plot_pca: TBD
        plot_autocorr: TBD
        plot_moving_avg: TBD
        plot_histograms: creates two figures, one for metadata and one for data, with density histograms for generated data and real data
    """
    def __init__(self, model, dataset, n_samples=1000):
        """
        Initializes the QualEvaluation class.

        Args:
            model: The gan model to be evaluated, must have a data generation method
            dataset: The dataset to be used for evaluation
            n_samples: The number of samples to generate from the model for comparison
        """
        self.model = model
        self.dataset = dataset
        if model.generates_metadata:
            self.gen_meta, self.gen_seq = self.model.generate(n_samples, og_scale=False)
            self.real_meta, self.real_seq = self.dataset.metadata, self.dataset.seq_data
        else:
            self.gen_seq = self.model.generate(n_samples, og_scale=False)
            self.real_seq = self.dataset.seq_data
    

    def plot_tsne(self, save: bool = False, save_path: str = None):
        """
        TBD
        """
        raise NotImplementedError
    

    def plot_pca(self, save: bool = False, save_path: str = None):
        """
        TBD  
        """
        raise NotImplementedError
    

    def plot_autocorr(self, save: bool = False, save_path: str = None):
        """
        TBD  
        """
        raise NotImplementedError
    

    def plot_moving_avg(self, save: bool = False, save_path: str = None):
        """
        TBD  
        """
        raise NotImplementedError


    def plot_histograms(self, n_bins: int = 50, save: bool = False, save_path: str = None):
        """
        Creates two figures, one for metadata and one for data, with density histograms for generated data and real data.

        Args:
            n_bins: The number of bins to use in the histograms
        """
        
        gen_seq = self.gen_seq.flatten().unsqueeze(1).detach().numpy() # [n_samples, 1]
        real_seq = self.real_seq.detach().numpy() # [n_samples, 1]

        real_seq_hist = plt.hist(real_seq, bins=n_bins, alpha=0.5, label='Real', density=True)
        gen_seq_hist = plt.hist(gen_seq, bins=real_seq_hist[1], alpha=0.5, label='Generated', density=True)
        plt.title("Distribution of Generated and Real Data")
        plt.ylabel("Density")
        plt.legend()

        if save:
            plt.savefig(save_path, bbox_inches='tight')
        else:
            plt.show() 

        if self.model.generates_metadata:

            fig, axs = plt.subplots(4, 2)
            fig.suptitle("Distribution of Generated and Real Metadata")
            fig.supylabel("Density")

            gen_meta = self.gen_meta.detach().numpy() # [n_samples, dims]
            real_meta = self.real_meta.detach().numpy() # [n_samples, dims]

            for i in range(4):
                for j in range(2):
                    real_meta_hist = axs[i, j].hist(real_meta[:, i*2+j], bins=n_bins, alpha=0.5, label='Real', density=True)
                    gen_meta_hist = axs[i, j].hist(gen_meta[:, i*2+j], bins=real_meta_hist[1], alpha=0.5, label='Generated', density=True)
                    if i==0 and j ==1:
                        axs[i, j].legend()
                
            if save:
                plt.savefig(save_path, bbox_inches='tight')
            else:
                plt.show()

        pass



if __name__ == "__main__":
    from src.models.GANs import SimpleGAN
    from src.utils.data import CarbonDataset
    model1 = SimpleGAN(window_size=24, n_seq_gen_layers=1, cpt_path="logs\debug\CISO-hydro-2024-06-03_14-43-34\checkpoints\checkpt_e9.pt")
    model2 = SimpleGAN(window_size=24, n_seq_gen_layers=1, cpt_path="logs\debug\CISO-hydro-2024-06-03_14-43-34\checkpoints\checkpt_e119.pt")
    model3 = SimpleGAN(window_size=24, n_seq_gen_layers=1, cpt_path="logs\debug\CISO-hydro-2024-06-03_14-43-34\checkpoints\checkpt_e299.pt")
    dataset = CarbonDataset("CISO", "hydro", mode="test")
    qual = QualEvaluation(model3, dataset, 1000)
    qual.plot_histograms()
